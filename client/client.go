// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

package client

import (
	"io"
	"net/http"

	"github.com/mattermost/mattermost-server/v5/model"
)

type Client interface {
	CreateChannel(channel *model.Channel) (*model.Channel, *model.Response)
	RemoveUserFromChannel(channelId, userId string) (bool, *model.Response)
	GetChannelMembers(channelId string, page, perPage int, etag string) (*model.ChannelMembers, *model.Response)
	AddChannelMember(channelId, userId string) (*model.ChannelMember, *model.Response)
	DeleteChannel(channelId string) (bool, *model.Response)
	PermanentDeleteChannel(channelId string) (bool, *model.Response)
	MoveChannel(channelId, teamId string, force bool) (*model.Channel, *model.Response)
	GetPublicChannelsForTeam(teamId string, page int, perPage int, etag string) ([]*model.Channel, *model.Response)
	GetDeletedChannelsForTeam(teamId string, page int, perPage int, etag string) ([]*model.Channel, *model.Response)
	GetPrivateChannelsForTeam(teamId string, page int, perPage int, etag string) ([]*model.Channel, *model.Response)
	GetChannelsForTeamForUser(teamId, userId string, includeDeleted bool, etag string) ([]*model.Channel, *model.Response)
	RestoreChannel(channelId string) (*model.Channel, *model.Response)
	PatchChannel(channelId string, patch *model.ChannelPatch) (*model.Channel, *model.Response)
	GetChannelByName(channelName, teamId string, etag string) (*model.Channel, *model.Response)
	GetChannelByNameIncludeDeleted(channelName, teamId string, etag string) (*model.Channel, *model.Response)
	GetChannel(channelId, etag string) (*model.Channel, *model.Response)
	GetTeam(teamId, etag string) (*model.Team, *model.Response)
	GetTeamByName(name, etag string) (*model.Team, *model.Response)
	GetAllTeams(etag string, page int, perPage int) ([]*model.Team, *model.Response)
	CreateTeam(team *model.Team) (*model.Team, *model.Response)
	PatchTeam(teamId string, patch *model.TeamPatch) (*model.Team, *model.Response)
	AddTeamMember(teamId, userId string) (*model.TeamMember, *model.Response)
	RemoveTeamMember(teamId, userId string) (bool, *model.Response)
	SoftDeleteTeam(teamId string) (bool, *model.Response)
	PermanentDeleteTeam(teamId string) (bool, *model.Response)
	RestoreTeam(teamId string) (*model.Team, *model.Response)
	UpdateTeamPrivacy(teamId string, privacy string) (*model.Team, *model.Response)
	SearchTeams(search *model.TeamSearch) ([]*model.Team, *model.Response)
	GetPost(postId string, etag string) (*model.Post, *model.Response)
	CreatePost(post *model.Post) (*model.Post, *model.Response)
	GetPostsForChannel(channelId string, page, perPage int, etag string, collapsedThreads bool) (*model.PostList, *model.Response)
	GetPostsRoute() string
	DoApiPost(url string, data string) (*http.Response, *model.AppError)
	GetLdapGroups() ([]*model.Group, *model.Response)
	GetGroupsByChannel(channelId string, groupOpts model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, int, *model.Response)
	GetGroupsByTeam(teamId string, groupOpts model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, int, *model.Response)
	UploadLicenseFile(data []byte) (bool, *model.Response)
	RemoveLicenseFile() (bool, *model.Response)
	GetLogs(page, perPage int) ([]string, *model.Response)
	GetRoleByName(name string) (*model.Role, *model.Response)
	PatchRole(roleId string, patch *model.RolePatch) (*model.Role, *model.Response)
	UploadPlugin(file io.Reader) (*model.Manifest, *model.Response)
	RemovePlugin(id string) (bool, *model.Response)
	EnablePlugin(id string) (bool, *model.Response)
	DisablePlugin(id string) (bool, *model.Response)
	GetPlugins() (*model.PluginsResponse, *model.Response)
	GetUser(userId, etag string) (*model.User, *model.Response)
	GetUserByUsername(userName, etag string) (*model.User, *model.Response)
	GetUserByEmail(email, etag string) (*model.User, *model.Response)
	PermanentDeleteUser(userId string) (bool, *model.Response)
	PermanentDeleteAllUsers() (bool, *model.Response)
	CreateUser(user *model.User) (*model.User, *model.Response)
	VerifyUserEmailWithoutToken(userId string) (*model.User, *model.Response)
	UpdateUserRoles(userId, roles string) (bool, *model.Response)
	InviteUsersToTeam(teamId string, userEmails []string) (bool, *model.Response)
	SendPasswordResetEmail(email string) (bool, *model.Response)
	UpdateUser(user *model.User) (*model.User, *model.Response)
	UpdateUserMfa(userId, code string, activate bool) (bool, *model.Response)
	UpdateUserPassword(userId, currentPassword, newPassword string) (bool, *model.Response)
	UpdateUserHashedPassword(userId, newHashedPassword string) (bool, *model.Response)
	CreateUserAccessToken(userId, description string) (*model.UserAccessToken, *model.Response)
	RevokeUserAccessToken(tokenId string) (bool, *model.Response)
	GetUserAccessTokensForUser(userId string, page, perPage int) ([]*model.UserAccessToken, *model.Response)
	ConvertUserToBot(userId string) (*model.Bot, *model.Response)
	ConvertBotToUser(userId string, userPatch *model.UserPatch, setSystemAdmin bool) (*model.User, *model.Response)
	PromoteGuestToUser(userId string) (bool, *model.Response)
	DemoteUserToGuest(guestId string) (bool, *model.Response)
	CreateCommand(cmd *model.Command) (*model.Command, *model.Response)
	ListCommands(teamId string, customOnly bool) ([]*model.Command, *model.Response)
	GetCommandById(cmdId string) (*model.Command, *model.Response)
	UpdateCommand(cmd *model.Command) (*model.Command, *model.Response)
	MoveCommand(teamId string, commandId string) (bool, *model.Response)
	DeleteCommand(commandId string) (bool, *model.Response)
	GetConfig() (*model.Config, *model.Response)
	UpdateConfig(*model.Config) (*model.Config, *model.Response)
	PatchConfig(*model.Config) (*model.Config, *model.Response)
	ReloadConfig() (bool, *model.Response)
	MigrateConfig(from, to string) (bool, *model.Response)
	SyncLdap() (bool, *model.Response)
	MigrateIdLdap(toAttribute string) (bool, *model.Response)
	GetUsers(page, perPage int, etag string) ([]*model.User, *model.Response)
	GetUsersByIds(userIds []string) ([]*model.User, *model.Response)
	GetUsersInTeam(teamId string, page, perPage int, etag string) ([]*model.User, *model.Response)
	UpdateUserActive(userId string, activate bool) (bool, *model.Response)
	UpdateTeam(team *model.Team) (*model.Team, *model.Response)
	UpdateChannelPrivacy(channelId string, privacy string) (*model.Channel, *model.Response)
	CreateBot(bot *model.Bot) (*model.Bot, *model.Response)
	PatchBot(userId string, patch *model.BotPatch) (*model.Bot, *model.Response)
	GetBots(page, perPage int, etag string) ([]*model.Bot, *model.Response)
	GetBotsIncludeDeleted(page, perPage int, etag string) ([]*model.Bot, *model.Response)
	GetBotsOrphaned(page, perPage int, etag string) ([]*model.Bot, *model.Response)
	DisableBot(botUserId string) (*model.Bot, *model.Response)
	EnableBot(botUserId string) (*model.Bot, *model.Response)
	AssignBot(botUserId, newOwnerId string) (*model.Bot, *model.Response)
	SetServerBusy(secs int) (bool, *model.Response)
	ClearServerBusy() (bool, *model.Response)
	GetServerBusy() (*model.ServerBusyState, *model.Response)
	CheckIntegrity() ([]model.IntegrityCheckResult, *model.Response)
	InstallPluginFromUrl(string, bool) (*model.Manifest, *model.Response)
	InstallMarketplacePlugin(*model.InstallMarketplacePluginRequest) (*model.Manifest, *model.Response)
	GetMarketplacePlugins(*model.MarketplacePluginFilter) ([]*model.MarketplacePlugin, *model.Response)
	MigrateAuthToLdap(fromAuthService string, matchField string, force bool) (bool, *model.Response)
	MigrateAuthToSaml(fromAuthService string, usersMap map[string]string, auto bool) (bool, *model.Response)
	GetPing() (string, *model.Response)
	GetPingWithFullServerStatus() (map[string]string, *model.Response)
	CreateUpload(us *model.UploadSession) (*model.UploadSession, *model.Response)
	GetUpload(uploadId string) (*model.UploadSession, *model.Response)
	GetUploadsForUser(userId string) ([]*model.UploadSession, *model.Response)
	UploadData(uploadId string, data io.Reader) (*model.FileInfo, *model.Response)
	ListImports() ([]string, *model.Response)
	GetJob(id string) (*model.Job, *model.Response)
	GetJobs(page int, perPage int) ([]*model.Job, *model.Response)
	GetJobsByType(jobType string, page int, perPage int) ([]*model.Job, *model.Response)
	CreateJob(job *model.Job) (*model.Job, *model.Response)
	CancelJob(jobId string) (bool, *model.Response)
	CreateIncomingWebhook(hook *model.IncomingWebhook) (*model.IncomingWebhook, *model.Response)
	UpdateIncomingWebhook(hook *model.IncomingWebhook) (*model.IncomingWebhook, *model.Response)
	GetIncomingWebhooks(page int, perPage int, etag string) ([]*model.IncomingWebhook, *model.Response)
	GetIncomingWebhooksForTeam(teamId string, page int, perPage int, etag string) ([]*model.IncomingWebhook, *model.Response)
	GetIncomingWebhook(hookID string, etag string) (*model.IncomingWebhook, *model.Response)
	DeleteIncomingWebhook(hookID string) (bool, *model.Response)
	CreateOutgoingWebhook(hook *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.Response)
	UpdateOutgoingWebhook(hook *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.Response)
	GetOutgoingWebhooks(page int, perPage int, etag string) ([]*model.OutgoingWebhook, *model.Response)
	GetOutgoingWebhook(hookId string) (*model.OutgoingWebhook, *model.Response)
	GetOutgoingWebhooksForChannel(channelId string, page int, perPage int, etag string) ([]*model.OutgoingWebhook, *model.Response)
	GetOutgoingWebhooksForTeam(teamId string, page int, perPage int, etag string) ([]*model.OutgoingWebhook, *model.Response)
	RegenOutgoingHookToken(hookId string) (*model.OutgoingWebhook, *model.Response)
	DeleteOutgoingWebhook(hookId string) (bool, *model.Response)
	ListExports() ([]string, *model.Response)
	DeleteExport(name string) (bool, *model.Response)
	DownloadExport(name string, wr io.Writer, offset int64) (int64, *model.Response)
}

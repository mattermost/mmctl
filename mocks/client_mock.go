// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mmctl/client (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v5/model"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddChannelMember mocks base method
func (m *MockClient) AddChannelMember(arg0, arg1 string) (*model.ChannelMember, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChannelMember", arg0, arg1)
	ret0, _ := ret[0].(*model.ChannelMember)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// AddChannelMember indicates an expected call of AddChannelMember
func (mr *MockClientMockRecorder) AddChannelMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChannelMember", reflect.TypeOf((*MockClient)(nil).AddChannelMember), arg0, arg1)
}

// AddTeamMember mocks base method
func (m *MockClient) AddTeamMember(arg0, arg1 string) (*model.TeamMember, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamMember", arg0, arg1)
	ret0, _ := ret[0].(*model.TeamMember)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// AddTeamMember indicates an expected call of AddTeamMember
func (mr *MockClientMockRecorder) AddTeamMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamMember", reflect.TypeOf((*MockClient)(nil).AddTeamMember), arg0, arg1)
}

// AssignBot mocks base method
func (m *MockClient) AssignBot(arg0, arg1 string) (*model.Bot, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignBot", arg0, arg1)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// AssignBot indicates an expected call of AssignBot
func (mr *MockClientMockRecorder) AssignBot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignBot", reflect.TypeOf((*MockClient)(nil).AssignBot), arg0, arg1)
}

// CancelJob mocks base method
func (m *MockClient) CancelJob(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJob", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CancelJob indicates an expected call of CancelJob
func (mr *MockClientMockRecorder) CancelJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockClient)(nil).CancelJob), arg0)
}

// CheckIntegrity mocks base method
func (m *MockClient) CheckIntegrity() ([]model.IntegrityCheckResult, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIntegrity")
	ret0, _ := ret[0].([]model.IntegrityCheckResult)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CheckIntegrity indicates an expected call of CheckIntegrity
func (mr *MockClientMockRecorder) CheckIntegrity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIntegrity", reflect.TypeOf((*MockClient)(nil).CheckIntegrity))
}

// ClearServerBusy mocks base method
func (m *MockClient) ClearServerBusy() (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearServerBusy")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// ClearServerBusy indicates an expected call of ClearServerBusy
func (mr *MockClientMockRecorder) ClearServerBusy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearServerBusy", reflect.TypeOf((*MockClient)(nil).ClearServerBusy))
}

// ConvertBotToUser mocks base method
func (m *MockClient) ConvertBotToUser(arg0 string, arg1 *model.UserPatch, arg2 bool) (*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertBotToUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// ConvertBotToUser indicates an expected call of ConvertBotToUser
func (mr *MockClientMockRecorder) ConvertBotToUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertBotToUser", reflect.TypeOf((*MockClient)(nil).ConvertBotToUser), arg0, arg1, arg2)
}

// ConvertUserToBot mocks base method
func (m *MockClient) ConvertUserToBot(arg0 string) (*model.Bot, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertUserToBot", arg0)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// ConvertUserToBot indicates an expected call of ConvertUserToBot
func (mr *MockClientMockRecorder) ConvertUserToBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertUserToBot", reflect.TypeOf((*MockClient)(nil).ConvertUserToBot), arg0)
}

// CreateBot mocks base method
func (m *MockClient) CreateBot(arg0 *model.Bot) (*model.Bot, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBot", arg0)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateBot indicates an expected call of CreateBot
func (mr *MockClientMockRecorder) CreateBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBot", reflect.TypeOf((*MockClient)(nil).CreateBot), arg0)
}

// CreateChannel mocks base method
func (m *MockClient) CreateChannel(arg0 *model.Channel) (*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockClientMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockClient)(nil).CreateChannel), arg0)
}

// CreateCommand mocks base method
func (m *MockClient) CreateCommand(arg0 *model.Command) (*model.Command, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommand", arg0)
	ret0, _ := ret[0].(*model.Command)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateCommand indicates an expected call of CreateCommand
func (mr *MockClientMockRecorder) CreateCommand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommand", reflect.TypeOf((*MockClient)(nil).CreateCommand), arg0)
}

// CreateIncomingWebhook mocks base method
func (m *MockClient) CreateIncomingWebhook(arg0 *model.IncomingWebhook) (*model.IncomingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIncomingWebhook", arg0)
	ret0, _ := ret[0].(*model.IncomingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateIncomingWebhook indicates an expected call of CreateIncomingWebhook
func (mr *MockClientMockRecorder) CreateIncomingWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIncomingWebhook", reflect.TypeOf((*MockClient)(nil).CreateIncomingWebhook), arg0)
}

// CreateJob mocks base method
func (m *MockClient) CreateJob(arg0 *model.Job) (*model.Job, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0)
	ret0, _ := ret[0].(*model.Job)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob
func (mr *MockClientMockRecorder) CreateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockClient)(nil).CreateJob), arg0)
}

// CreateOutgoingWebhook mocks base method
func (m *MockClient) CreateOutgoingWebhook(arg0 *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutgoingWebhook", arg0)
	ret0, _ := ret[0].(*model.OutgoingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateOutgoingWebhook indicates an expected call of CreateOutgoingWebhook
func (mr *MockClientMockRecorder) CreateOutgoingWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutgoingWebhook", reflect.TypeOf((*MockClient)(nil).CreateOutgoingWebhook), arg0)
}

// CreatePost mocks base method
func (m *MockClient) CreatePost(arg0 *model.Post) (*model.Post, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockClientMockRecorder) CreatePost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockClient)(nil).CreatePost), arg0)
}

// CreateTeam mocks base method
func (m *MockClient) CreateTeam(arg0 *model.Team) (*model.Team, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", arg0)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam
func (mr *MockClientMockRecorder) CreateTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockClient)(nil).CreateTeam), arg0)
}

// CreateUpload mocks base method
func (m *MockClient) CreateUpload(arg0 *model.UploadSession) (*model.UploadSession, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUpload", arg0)
	ret0, _ := ret[0].(*model.UploadSession)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateUpload indicates an expected call of CreateUpload
func (mr *MockClientMockRecorder) CreateUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpload", reflect.TypeOf((*MockClient)(nil).CreateUpload), arg0)
}

// CreateUser mocks base method
func (m *MockClient) CreateUser(arg0 *model.User) (*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockClientMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), arg0)
}

// CreateUserAccessToken mocks base method
func (m *MockClient) CreateUserAccessToken(arg0, arg1 string) (*model.UserAccessToken, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*model.UserAccessToken)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateUserAccessToken indicates an expected call of CreateUserAccessToken
func (mr *MockClientMockRecorder) CreateUserAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccessToken", reflect.TypeOf((*MockClient)(nil).CreateUserAccessToken), arg0, arg1)
}

// DeleteChannel mocks base method
func (m *MockClient) DeleteChannel(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel
func (mr *MockClientMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockClient)(nil).DeleteChannel), arg0)
}

// DeleteCommand mocks base method
func (m *MockClient) DeleteCommand(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommand", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// DeleteCommand indicates an expected call of DeleteCommand
func (mr *MockClientMockRecorder) DeleteCommand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommand", reflect.TypeOf((*MockClient)(nil).DeleteCommand), arg0)
}

// DeleteExport mocks base method
func (m *MockClient) DeleteExport(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExport", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// DeleteExport indicates an expected call of DeleteExport
func (mr *MockClientMockRecorder) DeleteExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExport", reflect.TypeOf((*MockClient)(nil).DeleteExport), arg0)
}

// DeleteIncomingWebhook mocks base method
func (m *MockClient) DeleteIncomingWebhook(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIncomingWebhook", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// DeleteIncomingWebhook indicates an expected call of DeleteIncomingWebhook
func (mr *MockClientMockRecorder) DeleteIncomingWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncomingWebhook", reflect.TypeOf((*MockClient)(nil).DeleteIncomingWebhook), arg0)
}

// DeleteOutgoingWebhook mocks base method
func (m *MockClient) DeleteOutgoingWebhook(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutgoingWebhook", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// DeleteOutgoingWebhook indicates an expected call of DeleteOutgoingWebhook
func (mr *MockClientMockRecorder) DeleteOutgoingWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutgoingWebhook", reflect.TypeOf((*MockClient)(nil).DeleteOutgoingWebhook), arg0)
}

// DemoteUserToGuest mocks base method
func (m *MockClient) DemoteUserToGuest(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DemoteUserToGuest", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// DemoteUserToGuest indicates an expected call of DemoteUserToGuest
func (mr *MockClientMockRecorder) DemoteUserToGuest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DemoteUserToGuest", reflect.TypeOf((*MockClient)(nil).DemoteUserToGuest), arg0)
}

// DisableBot mocks base method
func (m *MockClient) DisableBot(arg0 string) (*model.Bot, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableBot", arg0)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// DisableBot indicates an expected call of DisableBot
func (mr *MockClientMockRecorder) DisableBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBot", reflect.TypeOf((*MockClient)(nil).DisableBot), arg0)
}

// DisablePlugin mocks base method
func (m *MockClient) DisablePlugin(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisablePlugin", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// DisablePlugin indicates an expected call of DisablePlugin
func (mr *MockClientMockRecorder) DisablePlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePlugin", reflect.TypeOf((*MockClient)(nil).DisablePlugin), arg0)
}

// DoApiPost mocks base method
func (m *MockClient) DoApiPost(arg0, arg1 string) (*http.Response, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoApiPost", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// DoApiPost indicates an expected call of DoApiPost
func (mr *MockClientMockRecorder) DoApiPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoApiPost", reflect.TypeOf((*MockClient)(nil).DoApiPost), arg0, arg1)
}

// DownloadExport mocks base method
func (m *MockClient) DownloadExport(arg0 string, arg1 io.Writer, arg2 int64) (int64, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadExport", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// DownloadExport indicates an expected call of DownloadExport
func (mr *MockClientMockRecorder) DownloadExport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadExport", reflect.TypeOf((*MockClient)(nil).DownloadExport), arg0, arg1, arg2)
}

// EnableBot mocks base method
func (m *MockClient) EnableBot(arg0 string) (*model.Bot, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableBot", arg0)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// EnableBot indicates an expected call of EnableBot
func (mr *MockClientMockRecorder) EnableBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBot", reflect.TypeOf((*MockClient)(nil).EnableBot), arg0)
}

// EnablePlugin mocks base method
func (m *MockClient) EnablePlugin(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePlugin", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// EnablePlugin indicates an expected call of EnablePlugin
func (mr *MockClientMockRecorder) EnablePlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePlugin", reflect.TypeOf((*MockClient)(nil).EnablePlugin), arg0)
}

// GetAllTeams mocks base method
func (m *MockClient) GetAllTeams(arg0 string, arg1, arg2 int) ([]*model.Team, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeams", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Team)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetAllTeams indicates an expected call of GetAllTeams
func (mr *MockClientMockRecorder) GetAllTeams(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeams", reflect.TypeOf((*MockClient)(nil).GetAllTeams), arg0, arg1, arg2)
}

// GetBots mocks base method
func (m *MockClient) GetBots(arg0, arg1 int, arg2 string) ([]*model.Bot, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBots", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Bot)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetBots indicates an expected call of GetBots
func (mr *MockClientMockRecorder) GetBots(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBots", reflect.TypeOf((*MockClient)(nil).GetBots), arg0, arg1, arg2)
}

// GetBotsIncludeDeleted mocks base method
func (m *MockClient) GetBotsIncludeDeleted(arg0, arg1 int, arg2 string) ([]*model.Bot, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotsIncludeDeleted", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Bot)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetBotsIncludeDeleted indicates an expected call of GetBotsIncludeDeleted
func (mr *MockClientMockRecorder) GetBotsIncludeDeleted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotsIncludeDeleted", reflect.TypeOf((*MockClient)(nil).GetBotsIncludeDeleted), arg0, arg1, arg2)
}

// GetBotsOrphaned mocks base method
func (m *MockClient) GetBotsOrphaned(arg0, arg1 int, arg2 string) ([]*model.Bot, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotsOrphaned", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Bot)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetBotsOrphaned indicates an expected call of GetBotsOrphaned
func (mr *MockClientMockRecorder) GetBotsOrphaned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotsOrphaned", reflect.TypeOf((*MockClient)(nil).GetBotsOrphaned), arg0, arg1, arg2)
}

// GetChannel mocks base method
func (m *MockClient) GetChannel(arg0, arg1 string) (*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", arg0, arg1)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel
func (mr *MockClientMockRecorder) GetChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockClient)(nil).GetChannel), arg0, arg1)
}

// GetChannelByName mocks base method
func (m *MockClient) GetChannelByName(arg0, arg1, arg2 string) (*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetChannelByName indicates an expected call of GetChannelByName
func (mr *MockClientMockRecorder) GetChannelByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByName", reflect.TypeOf((*MockClient)(nil).GetChannelByName), arg0, arg1, arg2)
}

// GetChannelByNameIncludeDeleted mocks base method
func (m *MockClient) GetChannelByNameIncludeDeleted(arg0, arg1, arg2 string) (*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByNameIncludeDeleted", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetChannelByNameIncludeDeleted indicates an expected call of GetChannelByNameIncludeDeleted
func (mr *MockClientMockRecorder) GetChannelByNameIncludeDeleted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByNameIncludeDeleted", reflect.TypeOf((*MockClient)(nil).GetChannelByNameIncludeDeleted), arg0, arg1, arg2)
}

// GetChannelMembers mocks base method
func (m *MockClient) GetChannelMembers(arg0 string, arg1, arg2 int, arg3 string) (*model.ChannelMembers, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMembers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*model.ChannelMembers)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetChannelMembers indicates an expected call of GetChannelMembers
func (mr *MockClientMockRecorder) GetChannelMembers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMembers", reflect.TypeOf((*MockClient)(nil).GetChannelMembers), arg0, arg1, arg2, arg3)
}

// GetChannelsForTeamForUser mocks base method
func (m *MockClient) GetChannelsForTeamForUser(arg0, arg1 string, arg2 bool, arg3 string) ([]*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelsForTeamForUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetChannelsForTeamForUser indicates an expected call of GetChannelsForTeamForUser
func (mr *MockClientMockRecorder) GetChannelsForTeamForUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelsForTeamForUser", reflect.TypeOf((*MockClient)(nil).GetChannelsForTeamForUser), arg0, arg1, arg2, arg3)
}

// GetCommandById mocks base method
func (m *MockClient) GetCommandById(arg0 string) (*model.Command, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommandById", arg0)
	ret0, _ := ret[0].(*model.Command)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetCommandById indicates an expected call of GetCommandById
func (mr *MockClientMockRecorder) GetCommandById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandById", reflect.TypeOf((*MockClient)(nil).GetCommandById), arg0)
}

// GetConfig mocks base method
func (m *MockClient) GetConfig() (*model.Config, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*model.Config)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockClientMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockClient)(nil).GetConfig))
}

// GetDeletedChannelsForTeam mocks base method
func (m *MockClient) GetDeletedChannelsForTeam(arg0 string, arg1, arg2 int, arg3 string) ([]*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedChannelsForTeam", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetDeletedChannelsForTeam indicates an expected call of GetDeletedChannelsForTeam
func (mr *MockClientMockRecorder) GetDeletedChannelsForTeam(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedChannelsForTeam", reflect.TypeOf((*MockClient)(nil).GetDeletedChannelsForTeam), arg0, arg1, arg2, arg3)
}

// GetGroupsByChannel mocks base method
func (m *MockClient) GetGroupsByChannel(arg0 string, arg1 model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, int, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsByChannel", arg0, arg1)
	ret0, _ := ret[0].([]*model.GroupWithSchemeAdmin)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*model.Response)
	return ret0, ret1, ret2
}

// GetGroupsByChannel indicates an expected call of GetGroupsByChannel
func (mr *MockClientMockRecorder) GetGroupsByChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsByChannel", reflect.TypeOf((*MockClient)(nil).GetGroupsByChannel), arg0, arg1)
}

// GetGroupsByTeam mocks base method
func (m *MockClient) GetGroupsByTeam(arg0 string, arg1 model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, int, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsByTeam", arg0, arg1)
	ret0, _ := ret[0].([]*model.GroupWithSchemeAdmin)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*model.Response)
	return ret0, ret1, ret2
}

// GetGroupsByTeam indicates an expected call of GetGroupsByTeam
func (mr *MockClientMockRecorder) GetGroupsByTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsByTeam", reflect.TypeOf((*MockClient)(nil).GetGroupsByTeam), arg0, arg1)
}

// GetIncomingWebhook mocks base method
func (m *MockClient) GetIncomingWebhook(arg0, arg1 string) (*model.IncomingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomingWebhook", arg0, arg1)
	ret0, _ := ret[0].(*model.IncomingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetIncomingWebhook indicates an expected call of GetIncomingWebhook
func (mr *MockClientMockRecorder) GetIncomingWebhook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomingWebhook", reflect.TypeOf((*MockClient)(nil).GetIncomingWebhook), arg0, arg1)
}

// GetIncomingWebhooks mocks base method
func (m *MockClient) GetIncomingWebhooks(arg0, arg1 int, arg2 string) ([]*model.IncomingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomingWebhooks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.IncomingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetIncomingWebhooks indicates an expected call of GetIncomingWebhooks
func (mr *MockClientMockRecorder) GetIncomingWebhooks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomingWebhooks", reflect.TypeOf((*MockClient)(nil).GetIncomingWebhooks), arg0, arg1, arg2)
}

// GetIncomingWebhooksForTeam mocks base method
func (m *MockClient) GetIncomingWebhooksForTeam(arg0 string, arg1, arg2 int, arg3 string) ([]*model.IncomingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomingWebhooksForTeam", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.IncomingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetIncomingWebhooksForTeam indicates an expected call of GetIncomingWebhooksForTeam
func (mr *MockClientMockRecorder) GetIncomingWebhooksForTeam(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomingWebhooksForTeam", reflect.TypeOf((*MockClient)(nil).GetIncomingWebhooksForTeam), arg0, arg1, arg2, arg3)
}

// GetJob mocks base method
func (m *MockClient) GetJob(arg0 string) (*model.Job, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*model.Job)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob
func (mr *MockClientMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockClient)(nil).GetJob), arg0)
}

// GetJobs mocks base method
func (m *MockClient) GetJobs(arg0, arg1 int) ([]*model.Job, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobs", arg0, arg1)
	ret0, _ := ret[0].([]*model.Job)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetJobs indicates an expected call of GetJobs
func (mr *MockClientMockRecorder) GetJobs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobs", reflect.TypeOf((*MockClient)(nil).GetJobs), arg0, arg1)
}

// GetJobsByType mocks base method
func (m *MockClient) GetJobsByType(arg0 string, arg1, arg2 int) ([]*model.Job, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobsByType", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Job)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetJobsByType indicates an expected call of GetJobsByType
func (mr *MockClientMockRecorder) GetJobsByType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsByType", reflect.TypeOf((*MockClient)(nil).GetJobsByType), arg0, arg1, arg2)
}

// GetLdapGroups mocks base method
func (m *MockClient) GetLdapGroups() ([]*model.Group, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLdapGroups")
	ret0, _ := ret[0].([]*model.Group)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetLdapGroups indicates an expected call of GetLdapGroups
func (mr *MockClientMockRecorder) GetLdapGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLdapGroups", reflect.TypeOf((*MockClient)(nil).GetLdapGroups))
}

// GetLogs mocks base method
func (m *MockClient) GetLogs(arg0, arg1 int) ([]string, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs
func (mr *MockClientMockRecorder) GetLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockClient)(nil).GetLogs), arg0, arg1)
}

// GetMarketplacePlugins mocks base method
func (m *MockClient) GetMarketplacePlugins(arg0 *model.MarketplacePluginFilter) ([]*model.MarketplacePlugin, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketplacePlugins", arg0)
	ret0, _ := ret[0].([]*model.MarketplacePlugin)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetMarketplacePlugins indicates an expected call of GetMarketplacePlugins
func (mr *MockClientMockRecorder) GetMarketplacePlugins(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketplacePlugins", reflect.TypeOf((*MockClient)(nil).GetMarketplacePlugins), arg0)
}

// GetOutgoingWebhook mocks base method
func (m *MockClient) GetOutgoingWebhook(arg0 string) (*model.OutgoingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutgoingWebhook", arg0)
	ret0, _ := ret[0].(*model.OutgoingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetOutgoingWebhook indicates an expected call of GetOutgoingWebhook
func (mr *MockClientMockRecorder) GetOutgoingWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutgoingWebhook", reflect.TypeOf((*MockClient)(nil).GetOutgoingWebhook), arg0)
}

// GetOutgoingWebhooks mocks base method
func (m *MockClient) GetOutgoingWebhooks(arg0, arg1 int, arg2 string) ([]*model.OutgoingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutgoingWebhooks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.OutgoingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetOutgoingWebhooks indicates an expected call of GetOutgoingWebhooks
func (mr *MockClientMockRecorder) GetOutgoingWebhooks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutgoingWebhooks", reflect.TypeOf((*MockClient)(nil).GetOutgoingWebhooks), arg0, arg1, arg2)
}

// GetOutgoingWebhooksForChannel mocks base method
func (m *MockClient) GetOutgoingWebhooksForChannel(arg0 string, arg1, arg2 int, arg3 string) ([]*model.OutgoingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutgoingWebhooksForChannel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.OutgoingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetOutgoingWebhooksForChannel indicates an expected call of GetOutgoingWebhooksForChannel
func (mr *MockClientMockRecorder) GetOutgoingWebhooksForChannel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutgoingWebhooksForChannel", reflect.TypeOf((*MockClient)(nil).GetOutgoingWebhooksForChannel), arg0, arg1, arg2, arg3)
}

// GetOutgoingWebhooksForTeam mocks base method
func (m *MockClient) GetOutgoingWebhooksForTeam(arg0 string, arg1, arg2 int, arg3 string) ([]*model.OutgoingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutgoingWebhooksForTeam", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.OutgoingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetOutgoingWebhooksForTeam indicates an expected call of GetOutgoingWebhooksForTeam
func (mr *MockClientMockRecorder) GetOutgoingWebhooksForTeam(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutgoingWebhooksForTeam", reflect.TypeOf((*MockClient)(nil).GetOutgoingWebhooksForTeam), arg0, arg1, arg2, arg3)
}

// GetPing mocks base method
func (m *MockClient) GetPing() (string, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPing")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetPing indicates an expected call of GetPing
func (mr *MockClientMockRecorder) GetPing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPing", reflect.TypeOf((*MockClient)(nil).GetPing))
}

// GetPingWithFullServerStatus mocks base method
func (m *MockClient) GetPingWithFullServerStatus() (map[string]string, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPingWithFullServerStatus")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetPingWithFullServerStatus indicates an expected call of GetPingWithFullServerStatus
func (mr *MockClientMockRecorder) GetPingWithFullServerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPingWithFullServerStatus", reflect.TypeOf((*MockClient)(nil).GetPingWithFullServerStatus))
}

// GetPlugins mocks base method
func (m *MockClient) GetPlugins() (*model.PluginsResponse, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugins")
	ret0, _ := ret[0].(*model.PluginsResponse)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetPlugins indicates an expected call of GetPlugins
func (mr *MockClientMockRecorder) GetPlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockClient)(nil).GetPlugins))
}

// GetPost mocks base method
func (m *MockClient) GetPost(arg0, arg1 string) (*model.Post, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockClientMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockClient)(nil).GetPost), arg0, arg1)
}

// GetPostsForChannel mocks base method
func (m *MockClient) GetPostsForChannel(arg0 string, arg1, arg2 int, arg3 string, arg4 bool) (*model.PostList, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsForChannel", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*model.PostList)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetPostsForChannel indicates an expected call of GetPostsForChannel
func (mr *MockClientMockRecorder) GetPostsForChannel(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsForChannel", reflect.TypeOf((*MockClient)(nil).GetPostsForChannel), arg0, arg1, arg2, arg3, arg4)
}

// GetPostsRoute mocks base method
func (m *MockClient) GetPostsRoute() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsRoute")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPostsRoute indicates an expected call of GetPostsRoute
func (mr *MockClientMockRecorder) GetPostsRoute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsRoute", reflect.TypeOf((*MockClient)(nil).GetPostsRoute))
}

// GetPrivateChannelsForTeam mocks base method
func (m *MockClient) GetPrivateChannelsForTeam(arg0 string, arg1, arg2 int, arg3 string) ([]*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateChannelsForTeam", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetPrivateChannelsForTeam indicates an expected call of GetPrivateChannelsForTeam
func (mr *MockClientMockRecorder) GetPrivateChannelsForTeam(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateChannelsForTeam", reflect.TypeOf((*MockClient)(nil).GetPrivateChannelsForTeam), arg0, arg1, arg2, arg3)
}

// GetPublicChannelsForTeam mocks base method
func (m *MockClient) GetPublicChannelsForTeam(arg0 string, arg1, arg2 int, arg3 string) ([]*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicChannelsForTeam", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetPublicChannelsForTeam indicates an expected call of GetPublicChannelsForTeam
func (mr *MockClientMockRecorder) GetPublicChannelsForTeam(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicChannelsForTeam", reflect.TypeOf((*MockClient)(nil).GetPublicChannelsForTeam), arg0, arg1, arg2, arg3)
}

// GetRoleByName mocks base method
func (m *MockClient) GetRoleByName(arg0 string) (*model.Role, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByName", arg0)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetRoleByName indicates an expected call of GetRoleByName
func (mr *MockClientMockRecorder) GetRoleByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByName", reflect.TypeOf((*MockClient)(nil).GetRoleByName), arg0)
}

// GetServerBusy mocks base method
func (m *MockClient) GetServerBusy() (*model.ServerBusyState, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerBusy")
	ret0, _ := ret[0].(*model.ServerBusyState)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetServerBusy indicates an expected call of GetServerBusy
func (mr *MockClientMockRecorder) GetServerBusy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerBusy", reflect.TypeOf((*MockClient)(nil).GetServerBusy))
}

// GetTeam mocks base method
func (m *MockClient) GetTeam(arg0, arg1 string) (*model.Team, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", arg0, arg1)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam
func (mr *MockClientMockRecorder) GetTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockClient)(nil).GetTeam), arg0, arg1)
}

// GetTeamByName mocks base method
func (m *MockClient) GetTeamByName(arg0, arg1 string) (*model.Team, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamByName", arg0, arg1)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetTeamByName indicates an expected call of GetTeamByName
func (mr *MockClientMockRecorder) GetTeamByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamByName", reflect.TypeOf((*MockClient)(nil).GetTeamByName), arg0, arg1)
}

// GetUpload mocks base method
func (m *MockClient) GetUpload(arg0 string) (*model.UploadSession, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpload", arg0)
	ret0, _ := ret[0].(*model.UploadSession)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetUpload indicates an expected call of GetUpload
func (mr *MockClientMockRecorder) GetUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpload", reflect.TypeOf((*MockClient)(nil).GetUpload), arg0)
}

// GetUploadsForUser mocks base method
func (m *MockClient) GetUploadsForUser(arg0 string) ([]*model.UploadSession, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadsForUser", arg0)
	ret0, _ := ret[0].([]*model.UploadSession)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetUploadsForUser indicates an expected call of GetUploadsForUser
func (mr *MockClientMockRecorder) GetUploadsForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadsForUser", reflect.TypeOf((*MockClient)(nil).GetUploadsForUser), arg0)
}

// GetUser mocks base method
func (m *MockClient) GetUser(arg0, arg1 string) (*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockClientMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockClient)(nil).GetUser), arg0, arg1)
}

// GetUserAccessTokensForUser mocks base method
func (m *MockClient) GetUserAccessTokensForUser(arg0 string, arg1, arg2 int) ([]*model.UserAccessToken, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccessTokensForUser", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.UserAccessToken)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetUserAccessTokensForUser indicates an expected call of GetUserAccessTokensForUser
func (mr *MockClientMockRecorder) GetUserAccessTokensForUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccessTokensForUser", reflect.TypeOf((*MockClient)(nil).GetUserAccessTokensForUser), arg0, arg1, arg2)
}

// GetUserByEmail mocks base method
func (m *MockClient) GetUserByEmail(arg0, arg1 string) (*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockClientMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockClient)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByUsername mocks base method
func (m *MockClient) GetUserByUsername(arg0, arg1 string) (*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername
func (mr *MockClientMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockClient)(nil).GetUserByUsername), arg0, arg1)
}

// GetUsers mocks base method
func (m *MockClient) GetUsers(arg0, arg1 int, arg2 string) ([]*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockClientMockRecorder) GetUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockClient)(nil).GetUsers), arg0, arg1, arg2)
}

// GetUsersByIds mocks base method
func (m *MockClient) GetUsersByIds(arg0 []string) ([]*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByIds", arg0)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetUsersByIds indicates an expected call of GetUsersByIds
func (mr *MockClientMockRecorder) GetUsersByIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByIds", reflect.TypeOf((*MockClient)(nil).GetUsersByIds), arg0)
}

// GetUsersInTeam mocks base method
func (m *MockClient) GetUsersInTeam(arg0 string, arg1, arg2 int, arg3 string) ([]*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInTeam", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetUsersInTeam indicates an expected call of GetUsersInTeam
func (mr *MockClientMockRecorder) GetUsersInTeam(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInTeam", reflect.TypeOf((*MockClient)(nil).GetUsersInTeam), arg0, arg1, arg2, arg3)
}

// InstallMarketplacePlugin mocks base method
func (m *MockClient) InstallMarketplacePlugin(arg0 *model.InstallMarketplacePluginRequest) (*model.Manifest, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallMarketplacePlugin", arg0)
	ret0, _ := ret[0].(*model.Manifest)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// InstallMarketplacePlugin indicates an expected call of InstallMarketplacePlugin
func (mr *MockClientMockRecorder) InstallMarketplacePlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallMarketplacePlugin", reflect.TypeOf((*MockClient)(nil).InstallMarketplacePlugin), arg0)
}

// InstallPluginFromUrl mocks base method
func (m *MockClient) InstallPluginFromUrl(arg0 string, arg1 bool) (*model.Manifest, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallPluginFromUrl", arg0, arg1)
	ret0, _ := ret[0].(*model.Manifest)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// InstallPluginFromUrl indicates an expected call of InstallPluginFromUrl
func (mr *MockClientMockRecorder) InstallPluginFromUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallPluginFromUrl", reflect.TypeOf((*MockClient)(nil).InstallPluginFromUrl), arg0, arg1)
}

// InviteUsersToTeam mocks base method
func (m *MockClient) InviteUsersToTeam(arg0 string, arg1 []string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUsersToTeam", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// InviteUsersToTeam indicates an expected call of InviteUsersToTeam
func (mr *MockClientMockRecorder) InviteUsersToTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUsersToTeam", reflect.TypeOf((*MockClient)(nil).InviteUsersToTeam), arg0, arg1)
}

// ListCommands mocks base method
func (m *MockClient) ListCommands(arg0 string, arg1 bool) ([]*model.Command, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommands", arg0, arg1)
	ret0, _ := ret[0].([]*model.Command)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// ListCommands indicates an expected call of ListCommands
func (mr *MockClientMockRecorder) ListCommands(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommands", reflect.TypeOf((*MockClient)(nil).ListCommands), arg0, arg1)
}

// ListExports mocks base method
func (m *MockClient) ListExports() ([]string, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExports")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// ListExports indicates an expected call of ListExports
func (mr *MockClientMockRecorder) ListExports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExports", reflect.TypeOf((*MockClient)(nil).ListExports))
}

// ListImports mocks base method
func (m *MockClient) ListImports() ([]string, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImports")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// ListImports indicates an expected call of ListImports
func (mr *MockClientMockRecorder) ListImports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImports", reflect.TypeOf((*MockClient)(nil).ListImports))
}

// MigrateAuthToLdap mocks base method
func (m *MockClient) MigrateAuthToLdap(arg0, arg1 string, arg2 bool) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateAuthToLdap", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// MigrateAuthToLdap indicates an expected call of MigrateAuthToLdap
func (mr *MockClientMockRecorder) MigrateAuthToLdap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateAuthToLdap", reflect.TypeOf((*MockClient)(nil).MigrateAuthToLdap), arg0, arg1, arg2)
}

// MigrateAuthToSaml mocks base method
func (m *MockClient) MigrateAuthToSaml(arg0 string, arg1 map[string]string, arg2 bool) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateAuthToSaml", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// MigrateAuthToSaml indicates an expected call of MigrateAuthToSaml
func (mr *MockClientMockRecorder) MigrateAuthToSaml(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateAuthToSaml", reflect.TypeOf((*MockClient)(nil).MigrateAuthToSaml), arg0, arg1, arg2)
}

// MigrateConfig mocks base method
func (m *MockClient) MigrateConfig(arg0, arg1 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateConfig", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// MigrateConfig indicates an expected call of MigrateConfig
func (mr *MockClientMockRecorder) MigrateConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateConfig", reflect.TypeOf((*MockClient)(nil).MigrateConfig), arg0, arg1)
}

// MigrateIdLdap mocks base method
func (m *MockClient) MigrateIdLdap(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateIdLdap", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// MigrateIdLdap indicates an expected call of MigrateIdLdap
func (mr *MockClientMockRecorder) MigrateIdLdap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateIdLdap", reflect.TypeOf((*MockClient)(nil).MigrateIdLdap), arg0)
}

// MoveChannel mocks base method
func (m *MockClient) MoveChannel(arg0, arg1 string, arg2 bool) (*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveChannel", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// MoveChannel indicates an expected call of MoveChannel
func (mr *MockClientMockRecorder) MoveChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveChannel", reflect.TypeOf((*MockClient)(nil).MoveChannel), arg0, arg1, arg2)
}

// MoveCommand mocks base method
func (m *MockClient) MoveCommand(arg0, arg1 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCommand", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// MoveCommand indicates an expected call of MoveCommand
func (mr *MockClientMockRecorder) MoveCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCommand", reflect.TypeOf((*MockClient)(nil).MoveCommand), arg0, arg1)
}

// PatchBot mocks base method
func (m *MockClient) PatchBot(arg0 string, arg1 *model.BotPatch) (*model.Bot, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchBot", arg0, arg1)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// PatchBot indicates an expected call of PatchBot
func (mr *MockClientMockRecorder) PatchBot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBot", reflect.TypeOf((*MockClient)(nil).PatchBot), arg0, arg1)
}

// PatchChannel mocks base method
func (m *MockClient) PatchChannel(arg0 string, arg1 *model.ChannelPatch) (*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchChannel", arg0, arg1)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// PatchChannel indicates an expected call of PatchChannel
func (mr *MockClientMockRecorder) PatchChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchChannel", reflect.TypeOf((*MockClient)(nil).PatchChannel), arg0, arg1)
}

// PatchConfig mocks base method
func (m *MockClient) PatchConfig(arg0 *model.Config) (*model.Config, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchConfig", arg0)
	ret0, _ := ret[0].(*model.Config)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// PatchConfig indicates an expected call of PatchConfig
func (mr *MockClientMockRecorder) PatchConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchConfig", reflect.TypeOf((*MockClient)(nil).PatchConfig), arg0)
}

// PatchRole mocks base method
func (m *MockClient) PatchRole(arg0 string, arg1 *model.RolePatch) (*model.Role, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRole", arg0, arg1)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// PatchRole indicates an expected call of PatchRole
func (mr *MockClientMockRecorder) PatchRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRole", reflect.TypeOf((*MockClient)(nil).PatchRole), arg0, arg1)
}

// PatchTeam mocks base method
func (m *MockClient) PatchTeam(arg0 string, arg1 *model.TeamPatch) (*model.Team, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchTeam", arg0, arg1)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// PatchTeam indicates an expected call of PatchTeam
func (mr *MockClientMockRecorder) PatchTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTeam", reflect.TypeOf((*MockClient)(nil).PatchTeam), arg0, arg1)
}

// PermanentDeleteAllUsers mocks base method
func (m *MockClient) PermanentDeleteAllUsers() (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermanentDeleteAllUsers")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// PermanentDeleteAllUsers indicates an expected call of PermanentDeleteAllUsers
func (mr *MockClientMockRecorder) PermanentDeleteAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermanentDeleteAllUsers", reflect.TypeOf((*MockClient)(nil).PermanentDeleteAllUsers))
}

// PermanentDeleteChannel mocks base method
func (m *MockClient) PermanentDeleteChannel(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermanentDeleteChannel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// PermanentDeleteChannel indicates an expected call of PermanentDeleteChannel
func (mr *MockClientMockRecorder) PermanentDeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermanentDeleteChannel", reflect.TypeOf((*MockClient)(nil).PermanentDeleteChannel), arg0)
}

// PermanentDeleteTeam mocks base method
func (m *MockClient) PermanentDeleteTeam(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermanentDeleteTeam", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// PermanentDeleteTeam indicates an expected call of PermanentDeleteTeam
func (mr *MockClientMockRecorder) PermanentDeleteTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermanentDeleteTeam", reflect.TypeOf((*MockClient)(nil).PermanentDeleteTeam), arg0)
}

// PermanentDeleteUser mocks base method
func (m *MockClient) PermanentDeleteUser(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermanentDeleteUser", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// PermanentDeleteUser indicates an expected call of PermanentDeleteUser
func (mr *MockClientMockRecorder) PermanentDeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermanentDeleteUser", reflect.TypeOf((*MockClient)(nil).PermanentDeleteUser), arg0)
}

// PromoteGuestToUser mocks base method
func (m *MockClient) PromoteGuestToUser(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteGuestToUser", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// PromoteGuestToUser indicates an expected call of PromoteGuestToUser
func (mr *MockClientMockRecorder) PromoteGuestToUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteGuestToUser", reflect.TypeOf((*MockClient)(nil).PromoteGuestToUser), arg0)
}

// RegenOutgoingHookToken mocks base method
func (m *MockClient) RegenOutgoingHookToken(arg0 string) (*model.OutgoingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenOutgoingHookToken", arg0)
	ret0, _ := ret[0].(*model.OutgoingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// RegenOutgoingHookToken indicates an expected call of RegenOutgoingHookToken
func (mr *MockClientMockRecorder) RegenOutgoingHookToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenOutgoingHookToken", reflect.TypeOf((*MockClient)(nil).RegenOutgoingHookToken), arg0)
}

// ReloadConfig mocks base method
func (m *MockClient) ReloadConfig() (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadConfig")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// ReloadConfig indicates an expected call of ReloadConfig
func (mr *MockClientMockRecorder) ReloadConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadConfig", reflect.TypeOf((*MockClient)(nil).ReloadConfig))
}

// RemoveLicenseFile mocks base method
func (m *MockClient) RemoveLicenseFile() (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLicenseFile")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// RemoveLicenseFile indicates an expected call of RemoveLicenseFile
func (mr *MockClientMockRecorder) RemoveLicenseFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLicenseFile", reflect.TypeOf((*MockClient)(nil).RemoveLicenseFile))
}

// RemovePlugin mocks base method
func (m *MockClient) RemovePlugin(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePlugin", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// RemovePlugin indicates an expected call of RemovePlugin
func (mr *MockClientMockRecorder) RemovePlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePlugin", reflect.TypeOf((*MockClient)(nil).RemovePlugin), arg0)
}

// RemoveTeamMember mocks base method
func (m *MockClient) RemoveTeamMember(arg0, arg1 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamMember", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// RemoveTeamMember indicates an expected call of RemoveTeamMember
func (mr *MockClientMockRecorder) RemoveTeamMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamMember", reflect.TypeOf((*MockClient)(nil).RemoveTeamMember), arg0, arg1)
}

// RemoveUserFromChannel mocks base method
func (m *MockClient) RemoveUserFromChannel(arg0, arg1 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromChannel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// RemoveUserFromChannel indicates an expected call of RemoveUserFromChannel
func (mr *MockClientMockRecorder) RemoveUserFromChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromChannel", reflect.TypeOf((*MockClient)(nil).RemoveUserFromChannel), arg0, arg1)
}

// RestoreChannel mocks base method
func (m *MockClient) RestoreChannel(arg0 string) (*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreChannel", arg0)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// RestoreChannel indicates an expected call of RestoreChannel
func (mr *MockClientMockRecorder) RestoreChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreChannel", reflect.TypeOf((*MockClient)(nil).RestoreChannel), arg0)
}

// RestoreTeam mocks base method
func (m *MockClient) RestoreTeam(arg0 string) (*model.Team, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTeam", arg0)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// RestoreTeam indicates an expected call of RestoreTeam
func (mr *MockClientMockRecorder) RestoreTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTeam", reflect.TypeOf((*MockClient)(nil).RestoreTeam), arg0)
}

// RevokeUserAccessToken mocks base method
func (m *MockClient) RevokeUserAccessToken(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserAccessToken", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// RevokeUserAccessToken indicates an expected call of RevokeUserAccessToken
func (mr *MockClientMockRecorder) RevokeUserAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserAccessToken", reflect.TypeOf((*MockClient)(nil).RevokeUserAccessToken), arg0)
}

// SearchTeams mocks base method
func (m *MockClient) SearchTeams(arg0 *model.TeamSearch) ([]*model.Team, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTeams", arg0)
	ret0, _ := ret[0].([]*model.Team)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// SearchTeams indicates an expected call of SearchTeams
func (mr *MockClientMockRecorder) SearchTeams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTeams", reflect.TypeOf((*MockClient)(nil).SearchTeams), arg0)
}

// SendPasswordResetEmail mocks base method
func (m *MockClient) SendPasswordResetEmail(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordResetEmail", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// SendPasswordResetEmail indicates an expected call of SendPasswordResetEmail
func (mr *MockClientMockRecorder) SendPasswordResetEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordResetEmail", reflect.TypeOf((*MockClient)(nil).SendPasswordResetEmail), arg0)
}

// SetServerBusy mocks base method
func (m *MockClient) SetServerBusy(arg0 int) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServerBusy", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// SetServerBusy indicates an expected call of SetServerBusy
func (mr *MockClientMockRecorder) SetServerBusy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServerBusy", reflect.TypeOf((*MockClient)(nil).SetServerBusy), arg0)
}

// SoftDeleteTeam mocks base method
func (m *MockClient) SoftDeleteTeam(arg0 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteTeam", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// SoftDeleteTeam indicates an expected call of SoftDeleteTeam
func (mr *MockClientMockRecorder) SoftDeleteTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteTeam", reflect.TypeOf((*MockClient)(nil).SoftDeleteTeam), arg0)
}

// SyncLdap mocks base method
func (m *MockClient) SyncLdap() (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncLdap")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// SyncLdap indicates an expected call of SyncLdap
func (mr *MockClientMockRecorder) SyncLdap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncLdap", reflect.TypeOf((*MockClient)(nil).SyncLdap))
}

// UpdateChannelPrivacy mocks base method
func (m *MockClient) UpdateChannelPrivacy(arg0, arg1 string) (*model.Channel, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelPrivacy", arg0, arg1)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateChannelPrivacy indicates an expected call of UpdateChannelPrivacy
func (mr *MockClientMockRecorder) UpdateChannelPrivacy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelPrivacy", reflect.TypeOf((*MockClient)(nil).UpdateChannelPrivacy), arg0, arg1)
}

// UpdateCommand mocks base method
func (m *MockClient) UpdateCommand(arg0 *model.Command) (*model.Command, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommand", arg0)
	ret0, _ := ret[0].(*model.Command)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateCommand indicates an expected call of UpdateCommand
func (mr *MockClientMockRecorder) UpdateCommand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommand", reflect.TypeOf((*MockClient)(nil).UpdateCommand), arg0)
}

// UpdateConfig mocks base method
func (m *MockClient) UpdateConfig(arg0 *model.Config) (*model.Config, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", arg0)
	ret0, _ := ret[0].(*model.Config)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig
func (mr *MockClientMockRecorder) UpdateConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockClient)(nil).UpdateConfig), arg0)
}

// UpdateIncomingWebhook mocks base method
func (m *MockClient) UpdateIncomingWebhook(arg0 *model.IncomingWebhook) (*model.IncomingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIncomingWebhook", arg0)
	ret0, _ := ret[0].(*model.IncomingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateIncomingWebhook indicates an expected call of UpdateIncomingWebhook
func (mr *MockClientMockRecorder) UpdateIncomingWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIncomingWebhook", reflect.TypeOf((*MockClient)(nil).UpdateIncomingWebhook), arg0)
}

// UpdateOutgoingWebhook mocks base method
func (m *MockClient) UpdateOutgoingWebhook(arg0 *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutgoingWebhook", arg0)
	ret0, _ := ret[0].(*model.OutgoingWebhook)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateOutgoingWebhook indicates an expected call of UpdateOutgoingWebhook
func (mr *MockClientMockRecorder) UpdateOutgoingWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutgoingWebhook", reflect.TypeOf((*MockClient)(nil).UpdateOutgoingWebhook), arg0)
}

// UpdateTeam mocks base method
func (m *MockClient) UpdateTeam(arg0 *model.Team) (*model.Team, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", arg0)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateTeam indicates an expected call of UpdateTeam
func (mr *MockClientMockRecorder) UpdateTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockClient)(nil).UpdateTeam), arg0)
}

// UpdateTeamPrivacy mocks base method
func (m *MockClient) UpdateTeamPrivacy(arg0, arg1 string) (*model.Team, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamPrivacy", arg0, arg1)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateTeamPrivacy indicates an expected call of UpdateTeamPrivacy
func (mr *MockClientMockRecorder) UpdateTeamPrivacy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamPrivacy", reflect.TypeOf((*MockClient)(nil).UpdateTeamPrivacy), arg0, arg1)
}

// UpdateUser mocks base method
func (m *MockClient) UpdateUser(arg0 *model.User) (*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockClientMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockClient)(nil).UpdateUser), arg0)
}

// UpdateUserActive mocks base method
func (m *MockClient) UpdateUserActive(arg0 string, arg1 bool) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserActive", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateUserActive indicates an expected call of UpdateUserActive
func (mr *MockClientMockRecorder) UpdateUserActive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserActive", reflect.TypeOf((*MockClient)(nil).UpdateUserActive), arg0, arg1)
}

// UpdateUserHashedPassword mocks base method
func (m *MockClient) UpdateUserHashedPassword(arg0, arg1 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHashedPassword", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateUserHashedPassword indicates an expected call of UpdateUserHashedPassword
func (mr *MockClientMockRecorder) UpdateUserHashedPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHashedPassword", reflect.TypeOf((*MockClient)(nil).UpdateUserHashedPassword), arg0, arg1)
}

// UpdateUserMfa mocks base method
func (m *MockClient) UpdateUserMfa(arg0, arg1 string, arg2 bool) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMfa", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateUserMfa indicates an expected call of UpdateUserMfa
func (mr *MockClientMockRecorder) UpdateUserMfa(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMfa", reflect.TypeOf((*MockClient)(nil).UpdateUserMfa), arg0, arg1, arg2)
}

// UpdateUserPassword mocks base method
func (m *MockClient) UpdateUserPassword(arg0, arg1, arg2 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword
func (mr *MockClientMockRecorder) UpdateUserPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockClient)(nil).UpdateUserPassword), arg0, arg1, arg2)
}

// UpdateUserRoles mocks base method
func (m *MockClient) UpdateUserRoles(arg0, arg1 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRoles", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateUserRoles indicates an expected call of UpdateUserRoles
func (mr *MockClientMockRecorder) UpdateUserRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoles", reflect.TypeOf((*MockClient)(nil).UpdateUserRoles), arg0, arg1)
}

// UploadData mocks base method
func (m *MockClient) UploadData(arg0 string, arg1 io.Reader) (*model.FileInfo, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadData", arg0, arg1)
	ret0, _ := ret[0].(*model.FileInfo)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UploadData indicates an expected call of UploadData
func (mr *MockClientMockRecorder) UploadData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadData", reflect.TypeOf((*MockClient)(nil).UploadData), arg0, arg1)
}

// UploadLicenseFile mocks base method
func (m *MockClient) UploadLicenseFile(arg0 []byte) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadLicenseFile", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UploadLicenseFile indicates an expected call of UploadLicenseFile
func (mr *MockClientMockRecorder) UploadLicenseFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadLicenseFile", reflect.TypeOf((*MockClient)(nil).UploadLicenseFile), arg0)
}

// UploadPlugin mocks base method
func (m *MockClient) UploadPlugin(arg0 io.Reader) (*model.Manifest, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPlugin", arg0)
	ret0, _ := ret[0].(*model.Manifest)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UploadPlugin indicates an expected call of UploadPlugin
func (mr *MockClientMockRecorder) UploadPlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPlugin", reflect.TypeOf((*MockClient)(nil).UploadPlugin), arg0)
}

// VerifyUserEmailWithoutToken mocks base method
func (m *MockClient) VerifyUserEmailWithoutToken(arg0 string) (*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserEmailWithoutToken", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// VerifyUserEmailWithoutToken indicates an expected call of VerifyUserEmailWithoutToken
func (mr *MockClientMockRecorder) VerifyUserEmailWithoutToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserEmailWithoutToken", reflect.TypeOf((*MockClient)(nil).VerifyUserEmailWithoutToken), arg0)
}
